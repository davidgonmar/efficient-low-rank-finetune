import argparse
import json
from pathlib import Path
import math
import matplotlib.pyplot as plt


def latex_escape(s: str) -> str:
    # Minimal LaTeX escaping for labels
    repl = {
        "\\": r"\textbackslash{}",
        "&": r"\&",
        "%": r"\%",
        "$": r"\$",
        "#": r"\#",
        "_": r"\_",
        "{": r"\{",
        "}": r"\}",
        "~": r"\textasciitilde{}",
        "^": r"\textasciicircum{}",
    }
    return "".join(repl.get(ch, ch) for ch in s)


def fmt_num(x, sig=3):
    if x is None:
        return ""
    try:
        # 3 significant figures, avoid scientific for ~[0.001..1000]
        s = f"{x:.{sig}g}"
        # Ensure trailing .0 for integers would not appear; keep as is
        return s
    except Exception:
        return str(x)


def load_run(path, label):
    with open(path, "r") as f:
        data = json.load(f)

    pts = [d for d in data if d.get("metric_value") != "original"]
    orig = next((d for d in data if d.get("metric_value") == "original"), None)
    pts.sort(key=lambda x: x["flops_ratio"])

    rows = [
        {
            "label": label,
            "flops_ratio": p["flops_ratio"],
            "params_ratio": p["params_ratio"],
            "ppl": p["ppl"],
            "note": "",
        }
        for p in pts
    ]
    if orig:
        rows.append(
            {
                "label": label,
                "flops_ratio": 1.0,
                "params_ratio": 1.0,
                "ppl": orig["ppl"],
                "note": "(orig)",
            }
        )

    return {
        "label": label,
        "flops_x": [r["flops_ratio"] for r in rows],
        "params_x": [r["params_ratio"] for r in rows],
        "ppl_y": [r["ppl"] for r in rows],
        "rows": rows,
    }


def make_latex_table(series, out_dir: Path, name: str, title: str):
    """Write a LaTeX table file with all rows from all runs."""
    table_name = (
        f"compressibility_table_{name}.tex" if name else "compressibility_table.tex"
    )
    tex_path = out_dir / table_name

    # Build rows: keep run grouping, already sorted by FLOPs via load_run
    lines = []
    lines.append("% Auto-generated by compressibility plotting script\n")
    lines.append("\\begin{table}[t]\n")
    lines.append("\\centering\n")
    lines.append("\\small\n")
    lines.append("\\begin{tabular}{lccc}\n")
    lines.append("\\toprule\n")
    lines.append("Run & FLOPs ratio & Params ratio & Perplexity\\\\\n")
    lines.append("\\midrule\n")
    for s in series:
        for r in s["rows"]:
            run_label = latex_escape(r["label"])
            if r["note"]:
                run_label += f"~{latex_escape(r['note'])}"
            lines.append(
                f"{run_label} & {fmt_num(r['flops_ratio'])} & {fmt_num(r['params_ratio'])} & {fmt_num(r['ppl'])}\\\\\n"
            )
        lines.append("\\addlinespace\n")  # visual separation between runs
    lines.append("\\bottomrule\n")
    lines.append("\\end{tabular}\n")
    lines.append(
        f"\\caption{{{latex_escape(title)} summary across FLOPs/Params compression points.}}\n"
    )
    label_key = (name or "compressibility").replace(" ", "-")
    lines.append(f"\\label{{tab:{latex_escape(label_key)}}}\n")
    lines.append("\\end{table}\n")

    tex_path.write_text("".join(lines), encoding="utf-8")
    return tex_path


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--runs", nargs="+", required=True, help="format: /path/to/results.json:Label"
    )
    ap.add_argument("--out_dir", default=".")
    ap.add_argument("--title", default="ViT compressibility", help="Plot title prefix")
    ap.add_argument("--name", help="Plot name")
    args = ap.parse_args()

    series = []
    for r in args.runs:
        if ":" in r:
            p, lbl = r.split(":", 1)
        else:
            p, lbl = r, Path(r).parent.name
        series.append(load_run(p, lbl))

    out_dir = Path(args.out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    # FLOPs plot
    plt.figure()
    for s in series:
        plt.plot(s["flops_x"], s["ppl_y"], marker="o", label=s["label"])
    plt.xscale("linear")
    # plt.yscale("log")  # Perplexity scale
    plt.xlabel("FLOPs ratio")
    plt.ylabel("Perplexity (log scale)")
    plt.title(f"{args.title} vs FLOPs")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.3)
    plt.tight_layout()
    flops_path = out_dir / f"compressibility_flops_{args.name}.pdf"
    plt.savefig(flops_path, dpi=200)

    # Parameters plot
    plt.figure()
    for s in series:
        plt.plot(s["params_x"], s["ppl_y"], marker="o", label=s["label"])
    plt.xscale("linear")
    plt.yscale("log")  # Perplexity scale
    plt.xlabel("Parameters ratio")
    plt.ylabel("Perplexity (log scale)")
    plt.title(f"{args.title} vs Parameters")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.3)
    plt.tight_layout()
    params_path = out_dir / f"compressibility_params_{args.name}.pdf"
    plt.savefig(params_path, dpi=200)

    # LaTeX table
    tex_path = make_latex_table(series, out_dir, args.name, args.title)
    print(f"Wrote LaTeX table to: {tex_path}")


if __name__ == "__main__":
    main()
